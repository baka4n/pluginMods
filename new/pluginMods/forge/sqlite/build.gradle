buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id("org.parchmentmc.librarian.forgegradle") version ("1.+")
}

apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

group groupId
version "$sqliteName-$forge-$modVersion"

java {
    archivesBaseName = sqliteName
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings("parchment", "$parchmentVersion-$minecraftVersion")
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', "${sqliteName}"

            mods {
                sqlite {
                    source sourceSets.main
                    source project(":common:sqlite").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${sqliteName}"

            mods {
                sqlite {
                    source sourceSets.main
                    source project(":common:sqlite").sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', "${sqliteName}"

            mods {
                sqlite {
                    source sourceSets.main
                    source project(":common:sqlite").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${sqliteName}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                sqlite {
                    source sourceSets.main
                    source project(":common:sqlite").sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "sqlite.refmap.json"

    config "${sqliteName}.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }
repositories {}

jarJar.enable()
reobf.create('jarJar')

build {
    dependsOn 'jarJar'
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + forgeVersion
    compileOnly(project(":common:sqlite"))

    minecraftLibrary(group: 'org.xerial', name: 'sqlite-jdbc', version: '3.41.0.0')

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    jarJar(group: 'org.xerial', name: 'sqlite-jdbc', version: '3.41.0.0')
}

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes([
                "Specification-Title"     : "${sqliteName}",
                "Specification-Vendor"    : "baka4n",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "baka4n",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


jar.finalizedBy('reobfJar')



tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
